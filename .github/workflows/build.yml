name: Build

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: write

jobs:
  matrix:
    runs-on: ubuntu-latest
    name: Fetch Build Keyboards
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yaml2json
        run: python3 -m pip install remarshal

      - name: Fetch Build Matrix
        id: matrix
        run: |
          echo "matrix=$(yaml2json build.yaml | jq -c .)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable
    needs: matrix
    name: Build
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}
    steps:
      - name: Prepare variables
        shell: bash
        env:
          board: ${{ matrix.board }}
          shield: ${{ matrix.shield }}
          artifact-name: ${{ matrix.artifact-name }}
          cmake-args: ${{ matrix.cmake-args }}
        run: |
          if [ -n "${shield}" ]; then
            EXTRA_CMAKE_ARGS="-DSHIELD=${shield}"
            ARTIFACT_NAME="${shield}-${board}-zmk"
            DISPLAY_NAME="${shield} - ${board}"
          else
            EXTRA_CMAKE_ARGS=
            ARTIFACT_NAME="${board}-zmk"
            DISPLAY_NAME="${board}"
          fi
          echo "EXTRA_CMAKE_ARGS=${EXTRA_CMAKE_ARGS}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "DISPLAY_NAME=${DISPLAY_NAME}" >> $GITHUB_ENV
          if [ -n "${artifact-name}" ]; then
            echo "ARTIFACT_NAME=${artifact-name}-zmk" >> $GITHUB_ENV
            echo "DISPLAY_NAME=${artifact-name}" >> $GITHUB_ENV
          fi
          if [ -n "${cmake-args}" ]; then
            echo "EXTRA_CMAKE_ARGS=${EXTRA_CMAKE_ARGS} ${cmake-args}" >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache west modules
        uses: actions/cache@v4
        continue-on-error: true
        env:
          cache-name: cache-zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
            zmk/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/west.yml', '**/build.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: West Init
        run: west init -l config

      - name: West Update
        run: west update

      - name: West Zephyr export
        run: west zephyr-export

      - name: West Build (${{ env.DISPLAY_NAME }})
        shell: bash
        run: west build -s zmk/app -b ${{ matrix.board }} -- -DZMK_CONFIG=${GITHUB_WORKSPACE}/config ${{ env.EXTRA_CMAKE_ARGS }}

      - name: ${{ env.DISPLAY_NAME }} Kconfig file
        run: grep -v -E "^#|^$" build/zephyr/.config | sort

      - name: Rename artifacts
        shell: bash
        run: |
          mkdir build/artifacts
          if [ -f build/zephyr/zmk.uf2 ]
          then
            cp build/zephyr/zmk.uf2 "build/artifacts/${{ env.ARTIFACT_NAME }}.uf2"
          elif [ -f build/zephyr/zmk.hex ]
          then
            cp build/zephyr/zmk.hex "build/artifacts/${{ env.ARTIFACT_NAME }}.hex"
          fi

      - name: Archive (${{ env.DISPLAY_NAME }})
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ env.ARTIFACT_NAME }}
          path: build/artifacts
